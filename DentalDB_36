/*

DROP TABLE OrderLines
DROP TABLE Orders
DROP Table Patients
DROP Table DentalServices
DROP TABLE Employees
DROP TABLE Ocupations

DROP FUNCTION GetPatientDiscount
DROP FUNCTION GetTotalPrice

DROP TRIGGER Instead_Trigger
DROP TRIGGER Update_trigger_discount
DROP TRIGGER Insert_trigger_total_price

USE MASTER
DROP DATABASE DentalDB_36

*/


CREATE DATABASE DentalDB_36
GO

USE DentalDB_36
GO


------------------------------------------CREATE TABLES---------------------------------------------------

/*
DROP TABLE OrderLines
DROP TABLE Orders
DROP Table Patients
DROP Table DentalServices
DROP TABLE Employees
DROP TABLE Ocupations
*/

/*
patients' info  
DROP TABLE Patients
*/
CREATE /*COLUMN*/ TABLE Patients
(
	patient_id int NOT NULL IDENTITY(1,1), ---UNSIGNED
	surname nvarchar(25) NOT NULL,
	name nvarchar(25) NOT NULL,
	patronimic nvarchar(25) NOT NULL DEFAULT '',
	dob date NOT NULL,
	email nvarchar(50) NOT NULL UNIQUE,
	phone nvarchar(12) CHECK (Phone LIKE '([0-9][0-9][0-9])[0-9][0-9][0-9][0-9][0-9][0-9][0-9]') UNIQUE,
	PRIMARY KEY(patient_id)
)
GO

/*
positions that can be ocupied by an employee 
DROP TABLE Ocupations
*/
CREATE /*COLUMN*/ TABLE Ocupations
(
	ocupation_id int NOT NULL IDENTITY(1,1),  ---UNSIGNED
	title nvarchar(50) UNIQUE,
	PRIMARY KEY(ocupation_id)	
)
GO

/*
employees' info
DROP TABLE Employees
*/
CREATE /*COLUMN*/ TABLE Employees
(
	employee_id int NOT NULL IDENTITY(1,1),  ---UNSIGNED
	ocupation_id int NOT NULL,
	surname nvarchar(25) NOT NULL,
	name nvarchar(25) NOT NULL,
	patronimic nvarchar(25) NOT NULL DEFAULT '',
    dob date NOT NULL,	
	email nvarchar(255) NOT NULL UNIQUE,	
	phone nvarchar(12) NOT NULL CHECK (Phone LIKE '([0-9][0-9][0-9])[0-9][0-9][0-9][0-9][0-9][0-9][0-9]') UNIQUE,
	PRIMARY KEY (employee_id),
	FOREIGN KEY (ocupation_id) REFERENCES Ocupations(ocupation_id)
)
GO

/*
available  services 
DROP TABLE DentalServices 
*/
CREATE /*COLUMN*/ TABLE DentalServices 
(
	service_id int NOT NULL IDENTITY(1,1),  ---UNSIGNED
	ocupation_id int NOT NULL,
	description nvarchar(100) NOT NULL,
	price decimal(8,2) NOT NULL DEFAULT '0.00',
	PRIMARY  KEY(service_id),
	FOREIGN KEY(ocupation_id) REFERENCES Ocupations(ocupation_id)
)
GO

/*
list of orders
DROP TABLE Orders
*/
CREATE /*COLUMN*/ TABLE Orders
(
	order_id int NOT NULL IDENTITY(1,1),  ---UNSIGNED
	patient_id int NOT NULL,
	discount decimal(5,2) NOT NULL DEFAULT '0.00',
	total_price decimal(8,2) NOT NULL DEFAULT '0.00',
	order_date date NOT NULL DEFAULT GETDATE(),
	order_time time NOT NULL DEFAULT CURRENT_TIMESTAMP, 	
	PRIMARY KEY(order_id),
	FOREIGN KEY(patient_id) REFERENCES Patients(patient_id)
)
GO 

/*
list of order's items
DROP TABLE OrderLines
*/
CREATE /*COLUMN*/ TABLE OrderLines
(
	order_id int NOT NULL,    ---UNSIGNED
	line_id int NOT NULL,     ---UNSIGNED
	service_id int NOT NULL,  ---UNSIGNED
	detail_date date NOT NULL DEFAULT GETDATE() ,
	detail_time time NOT NULL DEFAULT CURRENT_TIMESTAMP, 
	PRIMARY KEY(order_id, line_id),
	FOREIGN KEY(order_id) REFERENCES Orders(order_id),
	FOREIGN KEY(service_id) REFERENCES DentalServices(service_id)
)
GO

--------------------------------END OF TABLES-----------------------------------------------


------------------FUNCTIONS-------------------------------------------------------------
/*
DROP FUNCTION GetPatientDiscount
DROP FUNCTION GetTotalPrice
*/

/*
DROP FUNCTION GetPatientDiscount
*/
CREATE FUNCTION GetPatientDiscount (@patient_id int)
RETURNS DECIMAL(5,2)
AS 
BEGIN
	DECLARE @visit int;
	DECLARE @discount DECIMAL(5,2)

	SET @visit = (SELECT COUNT(*)
						FROM OrderLines AS Lines
						LEFT OUTER JOIN Orders AS Orders
						ON Lines.order_id = Orders.order_id
						WHERE Orders.patient_id =  @patient_id)

	SET @discount = CASE 
					WHEN @visit <=3 THEN '5.00'
					WHEN @visit <=5 THEN '10.00'
					WHEN @visit <=10 THEN '15.00'
					ELSE '20.00'
				END
					
	RETURN @discount
END
GO

/*
DROP FUNCTION GetTotalPrice
*/
CREATE FUNCTION GetTotalPrice (@order_id int, @patient_id int)
RETURNS DECIMAL(5,2)
AS
BEGIN

	DECLARE @price DECIMAL(5,2)
	DECLARE @discount DECIMAL(5,2)

	SELECT @price  = SUM(price)
		FROM Orders
		INNER JOIN OrderLines
		ON Orders.order_id = OrderLines.order_id
		INNER JOIN DentalServices
		ON OrderLines.service_id = DentalServices.service_id
		WHERE Orders.order_id = @order_id
		AND Orders.patient_id = @patient_id

	SET @discount = dbo.GetPatientDiscount(@patient_id)
	SET @price = @price - @discount

	RETURN @price

END
GO
----------------------------END OF FUNCTIONS-----------------------------------------------------------

-----------------------------------------TRIGGERS-----------------------------
/*
DROP TRIGGER Instead_Trigger
DROP TRIGGER Update_trigger_discount
DROP TRIGGER Insert_trigger_total_price
*/

/*
Set auto increment to column line_id 
DROP TRIGGER Instead_Trigger
*/
CREATE TRIGGER Instead_trigger_line_id
ON OrderLines
INSTEAD OF INSERT
AS
BEGIN
---declare local vars
DECLARE @order_id INT
DECLARE @line_id INT
DECLARE @service_id INT
DECLARE @detail_date DATE
DECLARE @detail_time TIME
---get data from the system table
SELECT @order_id = order_id FROM inserted
SELECT @service_id = service_id FROM inserted
SELECT @detail_date = detail_date FROM inserted
SELECT @detail_time = detail_time FROM inserted
--check if inserted order_id exists in the table OrderLines
IF NOT EXISTS (SELECT * FROM OrderLines WHERE order_id = @order_id)
SET @line_id = 1
ELSE
---increase by one the last inserted line's number 
SET @line_id = (SELECT MAX(OrderLines.line_id) + 1
FROM OrderLines
WHERE OrderLines.order_id = @order_id)
---change the data in the inserted line
INSERT INTO OrderLines (order_id, line_id, service_id, detail_date, detail_time)
VALUES (@order_id, @line_id, @service_id, @detail_date, @detail_time)
END
GO

/*
Update field discount depanding on the quantity of lines in the order
Applies to each order separetly

DROP TRIGGER Update_trigger_discount
*/
CREATE TRIGGER Update_trigger_discount
ON OrderLines
FOR INSERT
AS
BEGIN
---declare local vars
DECLARE @patient_id INT
DECLARE @order_id INT
DECLARE @line_id INT
DECLARE @service_id INT
DECLARE @detail_date DATE
DECLARE @detail_time TIME
---get data from the inserted line
SELECT @order_id = order_id FROM inserted
SELECT @service_id = service_id FROM inserted
SELECT @detail_date = detail_date FROM inserted
SELECT @detail_time = detail_time FROM inserted

SELECT  @patient_id = patient_id   
FROM Orders 
INNER JOIN OrderLines
ON Orders.order_id = @order_id

UPDATE Orders
SET Orders.discount = dbo.GetPatientDiscount(@patient_id) 
WHERE Orders.order_id = @order_id
END
GO

/*
DROP TRIGGER Insert_trigger_total_price
*/
CREATE TRIGGER Insert_trigger_total_price
ON OrderLines
FOR INSERT
AS
BEGIN
---declare local vars
DECLARE @total_sum DECIMAL(8,2)
DECLARE @discount DECIMAL(5,3)
DECLARE @order_id INT
DECLARE @line_id INT
DECLARE @service_id INT
DECLARE @detail_date DATE
DECLARE @detail_time TIME
---get data from the inserted line
SELECT @order_id = order_id FROM inserted
SELECT @service_id = service_id FROM inserted
SELECT @detail_date = detail_date FROM inserted
SELECT @detail_time = detail_time FROM inserted
---get discount for this order
SELECT @discount = discount
FROM Orders
WHERE order_id = @order_id
---get total sum of money spent on this order
SELECT @total_sum = SUM(price) 
FROM OrderLines
INNER JOIN DentalServices
ON DentalServices.service_id = OrderLines.service_id
WHERE OrderLines.order_id = @order_id
---update/set new data to the total sum of money spent (with discount)
UPDATE Orders
SET Orders.total_price = @total_sum - @discount
WHERE Orders.order_id = @order_id
END
GO

--------------------------END OF TRIGGERS-------------------------------------------------------

-------------------------------FILL THE DATA IN----------------------------------------------------------------------------------------------------------------------

INSERT INTO Patients (surname, name, patronimic, dob, email, phone) VALUES ('Ivanov', 'Ivan', 'Ivanovich', '2000.10.10', 'ivanov.ivan@mail.ru', '(987)2223344');
INSERT INTO Patients (surname, name, patronimic, dob, email, phone) VALUES ('Tokalenko', 'Sergei', 'Olegovic', '1987.12.01', 'sergej.tokalenko@gmail.com', '(999)9992211');
INSERT INTO Patients (surname, name, patronimic, dob, email, phone) VALUES ('Belih', 'Artem', 'Bogdanovich', '2007.09.02', 'artem.belih@hotmail.com', '(323)9234352');
INSERT INTO Patients (surname, name, patronimic, dob, email, phone) VALUES ('Panasenko', 'Igor', 'Ivanovich', '1972.11.21', 'mymail@mail.ru', '(923)2211333');
INSERT INTO Patients (surname, name, patronimic, dob, email, phone) VALUES ('Andrushko', 'Andrej', 'Borisovich', '1988.08.29', 'admin@ukr.net', '(945)9483724');
INSERT INTO Patients (surname, name, patronimic, dob, email, phone) VALUES ('Portnoj', 'Kondrat', 'Efimovich', '2001.07.15', 'portnoj@mail.ru', '(878)8844765');
INSERT INTO Patients (surname, name, patronimic, dob, email, phone) VALUES ('Laptev', 'Kiril', 'Andreevich', '2010.03.22', 'kiril_my@wp.com', '(673)9876567');
INSERT INTO Patients (surname, name, patronimic, dob, email, phone) VALUES ('Drakery', 'Anna', 'Alekseevna', '2002.04.28', 'order@dtr.net', '(097)4455676');
INSERT INTO Patients (surname, name, patronimic, dob, email, phone) VALUES ('Kireeva', 'Ekaterina', 'Mikhailovna', '1950.06.24', 'partner@gov.us', '(067)9876879');
INSERT INTO Patients (surname, name, patronimic, dob, email, phone) VALUES ('Koval', 'Irina', 'Andreevna', '1955.02.26', 'kartmen@qwer.ty', '(789)1233214');
INSERT INTO Patients (surname, name, patronimic, dob, email, phone) VALUES ('Kovalenko', 'Olga', 'Petrovna', '1999.12.30', 'olga.kovalenko@gmail.com', '(890)8833994');
INSERT INTO Patients (surname, name, patronimic, dob, email, phone) VALUES ('Konovalova', 'Galina', 'Ivanovna', '2009.12.31', 'galina_konovalova@mail.ru', '(674)2323234');
GO

INSERT INTO Ocupations (title) VALUES ('Surgeon');
INSERT INTO Ocupations (title) VALUES ('Dentist');
INSERT INTO Ocupations (title) VALUES ('Nurse');
INSERT INTO Ocupations (title) VALUES ('Dental Hygienist');
INSERT INTO Ocupations (title) VALUES ('Dental Lab Technician');
INSERT INTO Ocupations (title) VALUES ('General Dentist');
INSERT INTO Ocupations (title) VALUES ('Endodontist');
INSERT INTO Ocupations (title) VALUES ('Periodontist');
INSERT INTO Ocupations (title) VALUES ('Dental Anesthesiologist');
INSERT INTO Ocupations (title) VALUES ('Orthodontist');
GO

INSERT INTO Employees (ocupation_id, surname, name, patronimic, dob, email, phone) VALUES (3, 'Petrov', 'Petr', 'Petrovich', '1997.01.02', 'petr.petorv@mail.ru', '(786)9992231');
INSERT INTO Employees (ocupation_id, surname, name, patronimic, dob, email, phone) VALUES (1, 'Tarov', 'Boris', 'Arkadievich', '1978.05.07', 'boris.tarov@dental.com', '(964)9876546');
INSERT INTO Employees (ocupation_id, surname, name, patronimic, dob, email, phone) VALUES (2, 'Sergeeva', 'Anna', 'Petrovna', '2000', 'anna.sergeeva@dental.com', '(342)8097032');
INSERT INTO Employees (ocupation_id, surname, name, patronimic, dob, email, phone) VALUES (2, 'Garin', 'Aleksej', 'Sidorovich', '1964.01.20', 'aleksej.garin@dental.com', '(878)0834768');
INSERT INTO Employees (ocupation_id, surname, name, patronimic, dob, email, phone) VALUES (4, 'Kogan', 'Alena', 'Viktorovna', '1954.11.21', 'alena.kogan@dental.com', '(856)0839388');
INSERT INTO Employees (ocupation_id, surname, name, patronimic, dob, email, phone) VALUES (6, 'Dimov', 'Viktor', 'Tarasovich', '1998.06.10', 'viktor.dimov@dental.com', '(458)9784768');
INSERT INTO Employees (ocupation_id, surname, name, patronimic, dob, email, phone) VALUES (5, 'Dodon', 'Roman', 'Ivanovich', '2001.01.18', 'roman.dodon@dental.com', '(478)0827618');
INSERT INTO Employees (ocupation_id, surname, name, patronimic, dob, email, phone) VALUES (8, 'Parshina', 'Elena', 'Sidorovna', '1949.05.14', 'elena.parshina@dental.com', '(321)0894236');
INSERT INTO Employees (ocupation_id, surname, name, patronimic, dob, email, phone) VALUES (7, 'Garina', 'Maria', 'Sidorovna', '1966.09.12', 'maria.garina@dental.com', '(878)0834758');
INSERT INTO Employees (ocupation_id, surname, name, patronimic, dob, email, phone) VALUES (10, 'Borodina', 'Anastasiya', 'Yurivna', '1999.08.08', 'anastasiya.borodina@dental.com', '(067)9034768');
INSERT INTO Employees (ocupation_id, surname, name, patronimic, dob, email, phone) VALUES (9, 'Duka', 'Nadezhda', 'Andreevna', '2002.01.24', 'nadezhda.duka@dental.com', '(099)0834362');
INSERT INTO Employees (ocupation_id, surname, name, patronimic, dob, email, phone) VALUES (1, 'Skorobogatov', 'Anatolija', 'Spiridonovich', '1977.09.03', 'anatolij.skorobogatov@dental.com', '(099)4834768');
GO

INSERT INTO DentalServices (ocupation_id, description, price) VALUES(2, 'Filling', '20.00');
INSERT INTO DentalServices (ocupation_id, description, price) VALUES(2, 'Rroot canals', '15.00');
INSERT INTO DentalServices (ocupation_id, description, price) VALUES(1, 'Extractions', '25.00');
INSERT INTO DentalServices (ocupation_id, description, price) VALUES(6, 'Complete exams', '10.00');
INSERT INTO DentalServices (ocupation_id, description, price) VALUES(5, 'X-ray', '10.00');
INSERT INTO DentalServices (ocupation_id, description, price) VALUES(4, 'Dental Check Up', '15.00');
INSERT INTO DentalServices (ocupation_id, description, price) VALUES(4, 'Decay removal', '5.00');
INSERT INTO DentalServices (ocupation_id, description, price) VALUES(10, 'Fixed bridge', '25.00');
INSERT INTO DentalServices (ocupation_id, description, price) VALUES(10, 'Implant-supported bridge', '30.00');
INSERT INTO DentalServices (ocupation_id, description, price) VALUES(4, 'Professional Cleaning', '20.00');
INSERT INTO DentalServices (ocupation_id, description, price) VALUES(10, 'Scaling and Root Planing', '10.00');
INSERT INTO DentalServices (ocupation_id, description, price) VALUES(4, 'Tooth Whitening', '15.00');
INSERT INTO DentalServices (ocupation_id, description, price) VALUES(10, 'Veneers', '25.00');
INSERT INTO DentalServices (ocupation_id, description, price) VALUES(10, 'Braces', '25.00');
INSERT INTO DentalServices (ocupation_id, description, price) VALUES(1, 'Wisdom teeth removal', '30.00');
INSERT INTO DentalServices (ocupation_id, description, price) VALUES(10, 'Crowns', '35.00');
INSERT INTO DentalServices (ocupation_id, description, price) VALUES(4, 'Enamel Shaping', '15.00');
INSERT INTO DentalServices (ocupation_id, description, price) VALUES(2, 'Tooth Filling', '20.00');
INSERT INTO DentalServices (ocupation_id, description, price) VALUES(1, 'Extraction of teeth', '35.00');
INSERT INTO DentalServices (ocupation_id, description, price) VALUES(2, 'Root canal therapy', '25.00');
INSERT INTO DentalServices (ocupation_id, description, price) VALUES(3, 'Extra Care', '10.00');
GO

-----------Add Orders and Orders' lines------------------------
/*
Fill in the table Orders only after adding Functions and Triggers
*/
INSERT INTO Orders (patient_id) VALUES (5);
INSERT INTO Orders (patient_id) VALUES (11);
INSERT INTO Orders (patient_id) VALUES (3);
INSERT INTO Orders (patient_id) VALUES (7);
INSERT INTO Orders (patient_id) VALUES (5);
INSERT INTO Orders (patient_id) VALUES (5);
INSERT INTO Orders (patient_id) VALUES (2);
GO

/*
Fill in the table OrderLines only after adding Functions and Triggers
*/
INSERT INTO OrderLines (order_id, service_id) VALUES (2, 3);
INSERT INTO OrderLines (order_id, service_id) VALUES (2, 2);
INSERT INTO OrderLines (order_id, service_id) VALUES (1, 21)
INSERT INTO OrderLines (order_id, service_id) VALUES (1, 3);
INSERT INTO OrderLines (order_id, service_id) VALUES (1, 5);
INSERT INTO OrderLines (order_id, service_id) VALUES (1, 7);
INSERT INTO OrderLines (order_id, service_id) VALUES (3, 5);
INSERT INTO OrderLines (order_id, service_id) VALUES (4, 8);
INSERT INTO OrderLines (order_id, service_id) VALUES (6, 9);
GO

------------------TEST DB--------------------------------------------------
/*
SELECT * FROM Orders;
SELECT * FROM OrderLines;
SELECT * FROM DentalServices;
SELECT * FROM Ocupations;
SELECT * FROM Patients;
SELECT * FROM Employees;

SELECT title AS 'Ocupation', surname, name, DentalServices.description AS 'Dental Service'
FROM Orders
INNER JOIN OrderLines
ON Orders.order_id = OrderLines.order_id
INNER JOIN DentalServices
ON DentalServices.service_id = OrderLines.service_id
INNER JOIN Ocupations
ON Ocupations.ocupation_id = DentalServices.ocupation_id
INNER JOIN Employees
ON Employees.ocupation_id = Ocupations.ocupation_id
WHERE OrderLines.line_id = 1
AND Employees.employee_id = 1
GO

SELECT * FROM Orders;
SELECT * FROM OrderLines;
SELECT * FROM DentalServices;
SELECT * FROM Ocupations;
SELECT * FROM Patients;
SELECT * FROM Employees;

PRINT dbo.GetPatientDiscount(2)
PRINT dbo.GetTotalPrice(1, 5)
*/
